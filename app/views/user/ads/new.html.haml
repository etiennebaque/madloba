-# For anonymous user creating ads, we're adding a note saying that they can modify their ad, if they create an account.
- if current_user.nil?
  .col-lg-12.ad-non-signed-warning.alert.alert-dismissible.alert-warning{:role => "alert"}
    %button.close{"data-dismiss" => "alert", :type => "button"} ×
    %p= t('ad.create_account_first_html',                                                                                         |
        create_account: (link_to t('home.create_account').capitalize, new_registration_path(resource_name), class: 'alert-link'), |
        sign_in: (link_to t('home.sign_in'), new_session_path(resource_name), class: 'alert-link'))                               |

.container
  - if @ad.errors.any?
    .alert.alert-dismissable.alert-danger{:style => "margin-top: 21px;"}
      %button.close{"data-dismiss" => "alert", :type => "button"} ×
      %strong
        = t('ad.error_occurred', errors: pluralize(@ad.errors.count, t('home.error.one'), t('home.error.more')))
        \:
      %ul
        - @ad.errors.full_messages.each do |msg|
          %li= msg

  .row
    .col-lg-12
      = form_for @ad, html: { class: 'form-horizontal', role: 'form', multipart: true } do |f|
        %fieldset
          %h3= t('ad.new_ad')
          - if max_expire_days.to_i > 0
            .form-group
              .col-lg-2
              .col-lg-6
                %i= t('ad.once_created_expire_html', max_expire_days: max_expire_days)

          -# Ad title
          .form-group
            = f.label :title, t('ad.title'), class: 'col-lg-2 control-label'
            .col-lg-6
              = f.text_field :title, class: 'form-control help-message', autofocus: true, |
                :data => {:content => t('ad.title_help'), :placement => 'top',            |
                :toggle => 'popover', :trigger => 'hover focus'}                          |

          -# Name to use (it user is not anonymous)
          - if user_signed_in?
            .form-group
              = f.label :is_username_used, t('location.name_to_use'), class: 'col-lg-2 control-label'
              .col-lg-6
                .radio
                  %label
                    = f.radio_button :is_username_used, true, checked: true
                    = t('location.name_username')
                    (#{current_user.username})
                .radio
                  %label
                    = f.radio_button :is_username_used, false
                    = t('location.name_fullname')
                    (#{current_user.first_name} #{current_user.last_name})

          -# Giving / Accepting items
          .form-group
            = f.label :is_giving, t('location.ad_action'), class: 'col-lg-2 control-label'
            .col-lg-6
              .radio
                %label
                  = f.radio_button :is_giving, true, checked: true
                  = t('location.ad_action_giving')
              .radio
                %label
                  = f.radio_button :is_giving, false
                  = t('location.ad_action_accepting')

          -# Items
          .form-group
            = f.label :ad_items, t('ad.item'), class: 'col-lg-2 control-label'
            .col-lg-6
              #items
                = f.fields_for :ad_items do |ad_item|
                  = render 'shared/ad_item_fields', f: ad_item
                = link_to_add_association "<i class='glyphicon glyphicon-plus'></i> #{t('ad.add_item')}".html_safe, f, :ad_items, partial: 'shared/ad_item_fields', class: 'btn btn-success add-item-button'

          -# Ad description
          .form-group
            = f.label :description, t('ad.description')+'*:', class: 'col-lg-2 control-label'
            .col-lg-6
              = f.text_area :description, class: 'form-control help-message', rows: 6, |
                :data => {:content => t('ad.description_help'), :placement => 'top',   |
                :toggle => 'popover', :trigger => 'hover focus'}                       |

          -# Image upload - only possible when app deployed on server, for now
          - if !on_heroku? && can_upload_image
            .form-group
              = f.label :description, t('ad.upload_image'), class: 'col-lg-2 control-label'
              .col-lg-6
                = f.file_field :image, class: 'form-control', style: 'border: 0px; height: auto;'
                = f.hidden_field :image_cache
                %span#message= t('ad.less_than_limit')
            .form-group
              .col-lg-2
              .col-lg-10
                #image-section
                - if @ad.image?
                  - if is_image_available(@ad)
                    = image_tag @ad.image_url(:normal).to_s
                    .checkbox
                      %label
                        = f.check_box :remove_image
                        = t('ad.remove_image')
                  - elsif @ad.image && (@ad.errors[:image].nil? || (@ad.errors[:image] && @ad.errors[:image].length == 0))
                    .ad-processing
                      = t('ad.image_selected')

          -# Ad location section
          - if current_user.locations.any?
            -# List of all the different locations previously entered by the current user
            #locations_from_list
              .form-group
                = f.label :location_id, t('location.location')+'*:', class: 'col-lg-2 control-label'
                .col-lg-6
                  - current_user.locations.each_with_index do |loc, index|
                    .radio.existing_location
                      %label
                        - if index == 0
                          = f.radio_button :location_id, loc.id, checked: true
                          = "#{loc.location_full_name} - #{loc.location_type_address}"
                        - else
                          = f.radio_button :location_id, loc.id
                          = "#{loc.location_full_name} - #{loc.location_type_address}"

              .form-group
                .col-lg-6.col-lg-offset-2
                  %a.btn.btn-sm.btn-info.add-new-location
                    = t('ad.new_location')

          -# Location form partial
          .location-form-for-ad
            = f.fields_for :location, Location.new, html: {class: 'form-horizontal'} do |loc|
              = render 'shared/location_form', form: loc, location: @ad.location

          -# if anonymous user creates an ad, we need to ask for their name and email
          -# They need to provide a response to a captcha
          - if !user_signed_in?
            %h4= t('ad.about_you')
            -# Anonymous user's name
            .form-group
              = f.label :anon_name, t('ad.name'), class: 'col-lg-2 control-label'
              .col-lg-6
                = f.text_field :anon_name, class: 'form-control help-message',  |
                  :data => {:content => t('ad.name_help'), :placement => 'top', |
                  :toggle => 'popover', :trigger => 'hover focus'}              |
            -# Anonymous user's email
            .form-group
              = f.label :anon_email, t('ad.your_email')+'*:', class: 'col-lg-2 control-label'
              .col-lg-6
                = f.email_field :anon_email, class: 'form-control help-message', autofocus: true, |
                  :data => {:content => t('ad.email_help'), :placement => 'top',                  |
                  :toggle => 'popover', :trigger => 'hover focus'}                                |
            -# Captcha for anonymous user
            .form-group
              = f.label :anon_captcha, t('ad.captcha'), class: 'col-lg-2 control-label'
              .col-lg-6
                = f.show_simple_captcha
            %hr/

          -# Submit section
          .form-group{style: 'margin-top: 35px'}
            .col-lg-10.col-lg-offset-2
              = f.submit t('ad.create_this_ad'), class: 'btn btn-success'
              %a.btn{:href => "/"}= t('home.cancel')

          -# After submit, a notification shows up here, if a new image is being uploaded
          .form-group
            .col-lg-10.col-lg-offset-2
              %span#upload-in-progress

-# Modal window to show, when a location is not found on the map, in the location form
= render 'error_modal'

-# Loading JS scripts
- content_for :scripts do

  -# Includes all the Javascript related to map rendering (Leaflet, MapQuest, and script that creates the actual map
  = render 'shared/map_scripts_after_body'

  :javascript
    var location_number = #{user_locations_number};
    var canPickExistingLocs = #{can_choose_existing_locations(current_user)};
    adForm = new AdForm();
